【inline-block和float】
inline-block主要一个问题就是：兼容性问题。和空字符。

【类和ID选择器的区别】
1.1、ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，
ID选择器只能使用一次，而且仅一次。而类选择器可以使用多次。

2.可以使用类选择器词列表方法为一个元素同时设置多个样式。
我们可以为一个元素同时设多个样式，但只可以用类选择器的方法实现，ID选择器是不可以的（不能使用 ID 词列表）。
#stressid{
    color:red;
}
#bigsizeid{
    font-size:25px;
}
<p>到了<span id="stressid bigsizeid">三年级</span>下学期时，我们班上了一节公开课...</p>
这个代码不能实现。而
.stress{
    color:red;
}
.bigsize{
    font-size:25px;
}
<p>到了<span class="stress bigsize">三年级</span>下学期时，我们班上了一节公开课...</p>
可以实现

【子选择器】
还有一个比较有用的选择器子选择器，即大于符号(>),
用于选择指定标签元素的第一代子元素。如右侧代码编辑器中的代码：
.food>li{border:1px solid red;}
这行代码会使得food下的子元素li（水果，蔬菜）加入红色实现边框。
而香蕉、苹果、梨不受影响。
<ul class="food">
    <li>水果
        <ul>
        	<li>香蕉</li>
            <li>苹果</li>
            <li>梨</li>
        </ul>
    </li>
    <li>蔬菜
    	<ul>
        	<li>白菜</li>
            <li>油菜</li>
            <li>卷心菜</li>
        </ul>
    </li>
</ul>
【后代选择器】
总结：>作用于元素的第一代后代，空格作用于元素的所有后代。
【通用选择器】
作用于所有标签元素
*{color:red;}

【权职】
标签选择器：1  类选择器：10  ID选择器：100
p{color:red;} /*权值为1*/
p span{color:green;} /*权值为1+1=2*/
.warning{color:white;} /*权值为10*/
p span.warning{color:purple;} /*权值为1+1+10=12*/
#footer .note p{color:yellow;} /*权值为100+10+1=111*/
继承也有权值，蛋只有0.1可以理解为继承的权值最低。

【层叠】
层叠就是在html文件中对于同一个元素可以有多个css样式存在，当有相同权重的样式存在时，
会根据这些css样式的前后顺序来决定，处于最后面的css样式会被应用。

如下面代码:

p{color:red;}
p{color:green;}
<p class="first">三年级时，我还是一个<span>胆小如鼠</span>的小女孩。</p>
最后P中的文本会设置成 green,可以理解为后面的样式会覆盖前面的样式。

内部样式表(标签内部style="")>嵌入样式表（当前文件中）>外部样式表（外部文件中）

【重要性】
p{color:red!important;}在color:red后面加!important
p{color:green;}
<p class="first">三年级时，我还是一个<span>胆小如鼠</span>的小女孩。</p>
这时候段落中的文本会显示为red红色。

【元素分类】
常用的块状元素有：

<div>、<p>、<h1>...<h6>、<ol>、<ul>、<dl>、<table>、<address>、<blockquote> 、<form>

常用的内联元素有：

<a>、<span>、<br>、<i>、<em>、<strong>、<label>、<q>、<var>、<cite>、<code>

常用的内联块状元素有：

<img>、<input>

【块级元素特点：】

1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）

2、元素的高度、宽度、行高以及顶和底边距都可设置。

3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。

【内联元素特点：】

1、和其他元素都在一行上；

2、元素的高度、宽度及顶部和底部边距不可设置；

3、元素的宽度就是它包含的文字或图片的宽度，不可改变。

【层模型―相对定位】
如果想为元素设置层模型中的相对定位，需要设置position:relative（表示相对定位），
它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。
相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，
然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。
#div1{
    width:200px;
    height:200px;
    border:2px red solid;
    position:relative;
    left:100px;
    top:50px;
}
<div id="div1"></div>
代码实现相当于以前位置向下移动50px,向右移动100px.

【层模型-绝对定位】
如果想为元素设置层模型中的绝对定位，需要设置position:absolute(表示绝对定位)，
这条语句的作用将元素从文档流中拖出来，
然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。
如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。
向左移动100px：right:100px-----距离右边增加100px
向下移动50px：left:50px--------距离上边增加50px

【水平居中设置-定宽块状元素】
当被设置元素为块状元素时用 text-align：center 就不起作用了，
这时也分两种情况：定宽块状元素和不定宽块状元素。这一小节我们先来讲一讲定宽块状元素。

满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。

【水平居中设置-不定宽度块状元素】
加入 table 标签
设置 display;inline 方法
设置 position:relative 和 left:50%;

【垂直居中-父元素高度确定的单行文本】
父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的
 height 和 line-height 高度一致来实现的。如下代码：

【padding和margin的区别】
padding不能使用负值，
margin可以使用负值.

padding可以扩大背景色范围。

transform:translate(-50%,-50%);


一般li加属性position,display,margin,padding,width,height,line-height,background,float,overflow
等等这些（记住li标签是块级元素，本身拥有布局，所以加属性就是用来调整布局的）
a一般只需要font相关属性,color,margin和padding看情况用了,display有时也会用到
（a标签是内联元素，在不触发布局的情况下只会涉及到一些字体属性）

 a只写粗细颜色下划线之类的，定位什么的写在父层